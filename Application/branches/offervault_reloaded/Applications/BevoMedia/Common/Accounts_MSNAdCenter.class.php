<?php

/**
 * Creates and manages objects of the Accounts_MSNAdCenter table.
 *
 */


/**
 * Creates and manages objects of the Accounts_MSNAdCenter table.
 * 
 * Creates and manages objects of the Accounts_MSNAdCenter table and makes 
 * use of the MSN Ad Center API to create new Campaign, Ad Group, Keyword 
 * and Ad Variation objects.
 *  
 * @category	BevoMedia
 * @package 	Application
 * @subpackage 	Common
 * @copyright 	Copyright (c) 2009 RCS
 * @author 		RCS
 * @version 	0.1
 */
Class Accounts_MSNAdCenter Extends Accounts_PPC_Abstract {

  /**
   * Provider Type value used within local PPC Campaign tables.
   * MSN Ad Center = 3
   *
   * @var Integer $ProviderType
   */
  Protected $providerType = 3;
	
	Protected $API = false;

  /**
   * @var String $_table_name
   */
  Protected $_table_name = 'bevomedia_accounts_msnadcenter';


  /**
   * Returns MSN API.
   *
   * @return msn_api
   */
  Public Function GetAPI()
    {
      require_once(PATH . 'msn_api/msn_api.php');
      if($this->API !== false)
        return $this->API;

      if(!isset($this->id))
        return false;

      $this->GetInfo();

      $this->API = new msn_api($this->username, $this->password);
      return $this->API;
    }

  /**
   * Returns error generated by API.
   *
   * @return String
   */
  Public Function GetErrorAPI()
      {
        $API = $this->GetAPI();

        if($API->error != false)
          return $API->error;

        return false;
      }

  /**
   * Return if account is recognized on the API server.
   * If account is recognized, updates the table with Verified equal to '1'.
   * If account is not recognized, updates the table with Verified equal to '0'.
   *
   * @return boolean
   */
  Public Function VerifyAccountAPI()
        {
          $this->GetAPI();
          $Disabled = $this->API->disabled;
          if($Disabled == '1')
          {
            $this->Update(array("verified"=>0, "id"=>$this->id));
            return false;
          }else{
            $this->Update(array("verified"=>1, "id"=>$this->id));
            return true;
          }
        }

  /**
   * Add a Campaign using the API.
   */
  Public Function AddCampaignAPI($Name, $Budget = 5000, $Description = false, $GeoTargets = false, $NegativeKeywords = false, $ContentTargets = false)
          {
            $API = $this->GetAPI();

            if($Description === false)
            {
              $Description = $Name;
            }

            if($GeoTargets == 'targetAll')
            {
              //$GeoTargetID = -1;
            }else{
              //$GeoTargetID = $API->addCountryTargetsToLibrary($GeoTargets);
            }

            $GeoTargetID = -1;
            if(is_int($GeoTargetID))
              $Campaign = $API->createCampaignArray($Name, $Description, $Budget, $NegativeKeywords);
            else
              return 'Location Targeting Error: ' . $GeoTargetID;

            return $API->addCampaigns(array($Campaign));
          }

  /*
   * Add an Ad Group using the API.
   */
  Public Function AddAdGroupAPI($Name, $CampaignID, $Bid = 1, $AdDistribution = 'Search', $NegativeKeywords = null, $ContentBid = 0)
            {		
              $API = $this->GetAPI();

              $AdGroup = $API->createAdGroupArray($Name, $Bid, $AdDistribution, $NegativeKeywords, $ContentBid);
              return $API->addAdGroups(array($AdGroup), $CampaignID);
            }

  /**
   * Removes Ad Groups using the API.
   */
  Public Function RemoveAdGroupsAPI($CampaignID, $AdGroupIDs)
            {
              $API = $this->GetAPI();

              return $API->deleteAdGroups($CampaignID, $AdGroupIDs);
            }

  /**
   * Add an Ad Variation using the API.
   */
  Public Function AddAdVariationAPI($Title, $DestinationURL, $DisplayURL, $Description, $AdGroupID)
            {
              $API = $this->GetAPI();

              $AdVariation = $API->createAd($Title, $DestinationURL, $DisplayURL, $Description);
              return $API->addAds(array($AdVariation), $AdGroupID);
            }

  /**
   * Removes Ad Variations using the API.
   */
  Public Function RemoveAdVariationsAPI($AdGroupID, $AdVariationIDs)
            {
              $API = $this->GetAPI();

              return $API->deleteAds($AdGroupID, $AdVariationIDs);
            }

  /**
   * Add Keyword using the API.
   */
  Public Function AddKeywordAPI($Keyword, $Bid, $DestinationURL, $AdGroupID, $AdvMatch)
            {
              $API = $this->GetAPI();

              $Keyword = $API->createKeywordArray($Keyword, $Bid, $DestinationURL);
              return $API->addKeywords(array($Keyword), $AdGroupID);
            }

  /**
   * Return the Campaign ID from the remote server for the given Campaign $Name.
   *
   * @param String $Name
   * @return Integer
   */
  Public Function GetCampaignIDAPI($Name)
            {
              return $this->GetAPI()->getCampaignIdUsingName($Name);
            }

  /**
   * Return the Campaign Object from the remote server for the given Campaign $Name.
   *
   * @param String $Name
   * @return Integer
   */
  Public Function GetCampaignByNameAPI($Name)
            {
              $Output = $this->GetAPI()->getCampaignUsingName($Name);
              return $Output;
            }

  /**
   * Return a Campaign Object from the remote server for the given 
   * $CampaignId
   *
   * @param Integer $Id
   * @return Integer
   */
  Public Function GetCampaignByIdAPI($Id)
            {
              $CampaignArray = $this->GetAPI()->getCampaigns();
              foreach($CampaignArray as $campaign)
                if($campaign->Id == $Id)
                  return $campaign;
              return false;
            }
  /**
   * Return the Ad Group ID from the remote server for the given Ad Group $Name within Campaign $CampaignID.
   *
   * @param String $Name
   * @param Integer $CampaignID
   * @return Integer
   */
  Public Function GetAdGroupIDAPI($Name, $CampaignID)
                {
                  return $this->GetAPI()->getAdGroupIdUsingName($Name, $CampaignID);
                }

  /**
   * Return an array of Ad Groups from the remote server for the given Campaign $CampaignID.
   *
   * @param String $Name
   * @param Integer $CampaignID
   * @return Integer
   */
  Public Function GetAdGroupsAPI($CampaignID)
                {
                  return $this->GetAPI()->getAdGroups($CampaignID);
                }

  /**
   * Return an array of Keywords from the remote server for the given AdGroup $AdGroupID.
   *
   * @param String $Name
   * @param Integer $AdGroupID
   * @return Integer
   */
  Public Function GetKeywordsAPI($AdGroupID)
                {
                  return $this->GetAPI()->getKeywords($AdGroupID);
                }

  /**
   * Gets negative keywords for an Ad Group by ID
   *
   * @param Integer $AdGroupID
   * @return Integer
   */
  Public Function GetAdGroupNegativeKeywordsAPI($AdGroup)
  {
    $Output = array();
    if(count($AdGroup->negativeKeywords))
      foreach($AdGroup->negativeKeywords as $kw)
        $Output[] = substr($kw, 1);
    return $Output;
  }
  /**
   * Returns standardized campaign object using input $CampaignID and $API_Campaign values
   * to populate data.
   * 
   * @param Float $CampaignID
   * @param Mixed $API_Campaign
   * @return PPCCampaignObject
   */
  public function homogenizeCampaign($CampaignID, $API_Campaign)
  {
    //TODO: Implement GeoTarget retrieval
    $Output = new PPCCampaignObject();
    $Output->providerType = 3;
    $Output->campaignId = $CampaignID;
    $Output->apiCampaignId = $API_Campaign->Id;
    $Output->user__id = $this->user__id;
    $Output->name = $API_Campaign->Name;
    $Output->budget = $API_Campaign->MonthlyBudget;
    //$Output->GeoTargets = array();
    if(isset($API_Campaign->NegativeKeywords->string))
    {
      $Output->negativeKeywords = $API_Campaign->NegativeKeywords->string;
    }
    $Output->status = strtoupper($API_Campaign->Status);

    return $Output;
  }

  /**
   * Returns standardized ad group object using input $Campaign and $API_AdGroup values
   * to populate data.
   * 
   * @param PPCCampaignObject $Campaign
   * @param Mixed $API_AdGroup
   * @return PPCAdGroupObject
   */
  public function homogenizeAdGroup($Campaign, $API_AdGroup)
  {
    $Output = new PPCAdGroupObject();
    $Output->providerType = $Campaign->providerType;
    $Output->campaignID = $Campaign->campaignId;
    $Output->apiCampaignId = $Campaign->apiCampaignId;
    $Output->apiAdgroupId = $API_AdGroup->Id;
    $Output->user__id = $Campaign->user__id;
    $Output->name = $API_AdGroup->Name;
    $Output->bid = $API_AdGroup->ExactMatchBid->Amount;
    $Output->contentBid = $API_AdGroup->ContentMatchBid->Amount;
    $Output->adDistribution = $API_AdGroup->AdDistribution;
    $Output->status = strtoupper($API_AdGroup->Status);
    $Output->negativeKeywords = isset($API_AdGroup->NegativeKeywords->string) ? $API_AdGroup->NegativeKeywords->string : array();
    return $Output;
  }

  /**
   * Returns standardized keyword object using input $AdGroup and $API_Keyword values
   * to populate data.
   * 
   * @param PPCAdGroupObject $AdGroup
   * @param Mixed $API_Keyword
   * @return PPCAdGroupObject
   */
  public function homogenizeKeyword($AdGroup, $API_Keyword)
  {
    $Output = new PPCKeywordObject();
    $Output->providerType = $AdGroup->providerType;
    $Output->campaignId = $AdGroup->campaignId;
    $Output->apiCampaignId = $AdGroup->apiCampaignId;
    $Output->apiAdgroupId = $AdGroup->apiAdgroupId;
    $Output->apiKeywordId = $API_Keyword->Id;
    $Output->user__id = $AdGroup->user__id;
    $Output->keyword = $API_Keyword->Text;
    if(isset($API_Keyword->BroadMatchBid->Amount) && $API_Keyword->BroadMatchBid->Amount > 0)
    {
      $Output->bid = $API_Keyword->BroadMatchBid->Amount;
    }else if(isset($API_Keyword->ContentMatchBid->Amount) && $API_Keyword->ContentMatchBid->Amount > 0)
    {
      $Output->bid = $API_Keyword->ContentMatchBid->Amount;

    }else if(isset($API_Keyword->ExactMatchBid->Amount) && $API_Keyword->ExactMatchBid->Amount > 0)
    {
      $Output->bid = $API_Keyword->ExactMatchBid->Amount;
    }else if(isset($API_Keyword->PhraseMatchBid->Amount) && $API_Keyword->PhraseMatchBid->Amount > 0)
    {
      $Output->bid = $API_Keyword->PhraseMatchBid->Amount; 
    }
    return $Output;
  }

}
?>